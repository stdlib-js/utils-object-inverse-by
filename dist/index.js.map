{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar objectKeys = require( '@stdlib/utils-keys' );\nvar isArray = require( '@stdlib/assert-is-array' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isObjectLike = require( '@stdlib/assert-is-object-like' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Inverts an object, such that keys become values and values become keys, according to a transform function.\n*\n* @param {ObjectLike} obj - input object\n* @param {Options} [opts] - function options\n* @param {boolean} [opts.duplicates=true] - boolean indicating whether to store duplicate keys\n* @param {Function} transform - transform function\n* @throws {TypeError} first argument must be object-like\n* @throws {TypeError} options argument must an an object\n* @throws {TypeError} last argument must be a function\n* @throws {TypeError} must provide valid options\n* @returns {Object} inverted object\n*\n* @example\n* function transform( key, value ) {\n*     return key + value;\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop'\n* };\n* var out = invertBy( obj, transform );\n* // returns { 'abeep': 'a', 'bboop': 'b' }\n*\n* @example\n* function transform( key, value ) {\n*     return value;\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'beep'\n* };\n* var out = invertBy( obj, transform );\n* // returns { 'beep': [ 'a', 'b' ] }\n*\n* @example\n* function transform( key, value ) {\n*     return value;\n* }\n*\n* var obj = {};\n* obj.a = 'beep';\n* obj.b = 'boop';\n* obj.c = 'beep'; // inserted after `a`\n*\n* var opts = {\n*     'duplicates': false\n* };\n* var out = invertBy( obj, opts, transform );\n* // returns { 'beep': 'c', 'boop': 'b' }\n*/\nfunction invertBy( obj, opts, transform ) {\n\tvar allowDupes;\n\tvar keys;\n\tvar len;\n\tvar key;\n\tvar val;\n\tvar out;\n\tvar cb;\n\tvar v;\n\tvar i;\n\tif ( !isObjectLike( obj ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object (except null). Value: `%s`.', obj ) );\n\t}\n\tallowDupes = true;\n\tif ( arguments.length === 2 ) {\n\t\tcb = opts;\n\t} else {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'duplicates' ) ) {\n\t\t\tallowDupes = opts.duplicates;\n\t\t\tif ( !isBoolean( allowDupes ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'duplicates', allowDupes ) );\n\t\t\t}\n\t\t}\n\t\tcb = transform;\n\t}\n\tif ( !isFunction( cb ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', cb ) );\n\t}\n\tkeys = objectKeys( obj );\n\tlen = keys.length;\n\tout = {};\n\tif ( allowDupes ) {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tkey = keys[ i ];\n\t\t\tval = cb( key, obj[ key ], obj );\n\t\t\tif ( !hasOwnProp( out, val ) ) {\n\t\t\t\tout[ val ] = key;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tv = out[ val ];\n\t\t\tif ( isArray( v ) ) {\n\t\t\t\tout[ val ].push( key );\n\t\t\t} else {\n\t\t\t\tout[ val ] = [ v, key ];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tkey = keys[ i ];\n\t\t\tval = cb( key, obj[ key ], obj );\n\t\t\tout[ val ] = key;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = invertBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Invert an object, such that keys become values and values become keys, according to a transform function.\n*\n* @module @stdlib/utils-object-inverse-by\n*\n* @example\n* var invertBy = require( '@stdlib/utils-object-inverse-by' );\n*\n* function transform( key, value ) {\n*     return key + value;\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'boop'\n* };\n* var out = invertBy( obj, transform );\n* // returns { 'abeep': 'a', 'bboop': 'b' }\n*\n* @example\n* var invertBy = require( '@stdlib/utils-object-inverse-by' );\n*\n* function transform( key, value ) {\n*     return value;\n* }\n* var obj = {\n*     'a': 'beep',\n*     'b': 'beep'\n* };\n* var out = invertBy( obj, transform );\n* // returns { 'beep': [ 'a', 'b' ] }\n*\n* @example\n* var invertBy = require( '@stdlib/utils-object-inverse-by' );\n*\n* function transform( key, value ) {\n*     return value;\n* }\n*\n* var obj = {};\n* obj.a = 'beep';\n* obj.b = 'boop';\n* obj.c = 'beep'; // inserted after `a`\n*\n* var opts = {\n*     'duplicates': false\n* };\n* var out = invertBy( obj, opts, transform );\n* // returns { 'beep': 'c', 'boop': 'b' }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,oBAAqB,EAC3CC,EAAU,QAAS,yBAA0B,EAC7CC,EAAW,QAAS,gCAAiC,EACrDC,EAAe,QAAS,+BAAgC,EACxDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAa,QAAS,4BAA6B,EACnDC,EAAa,QAAS,iCAAkC,EACxDC,EAAS,QAAS,uBAAwB,EAwD9C,SAASC,EAAUC,EAAKC,EAAMC,EAAY,CACzC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACJ,GAAK,CAACjB,EAAcM,CAAI,EACvB,MAAM,IAAI,UAAWF,EAAQ,iFAAkFE,CAAI,CAAE,EAGtH,GADAG,EAAa,GACR,UAAU,SAAW,EACzBM,EAAKR,MACC,CACN,GAAK,CAACR,EAAUQ,CAAK,EACpB,MAAM,IAAI,UAAWH,EAAQ,qEAAsEG,CAAK,CAAE,EAE3G,GAAKJ,EAAYI,EAAM,YAAa,IACnCE,EAAaF,EAAK,WACb,CAACN,EAAWQ,CAAW,GAC3B,MAAM,IAAI,UAAWL,EAAQ,+DAAgE,aAAcK,CAAW,CAAE,EAG1HM,EAAKP,CACN,CACA,GAAK,CAACN,EAAYa,CAAG,EACpB,MAAM,IAAI,UAAWX,EAAQ,mEAAoEW,CAAG,CAAE,EAKvG,GAHAL,EAAOb,EAAYS,CAAI,EACvBK,EAAMD,EAAK,OACXI,EAAM,CAAC,EACFL,EACJ,IAAMQ,EAAI,EAAGA,EAAIN,EAAKM,IAAM,CAG3B,GAFAL,EAAMF,EAAMO,CAAE,EACdJ,EAAME,EAAIH,EAAKN,EAAKM,CAAI,EAAGN,CAAI,EAC1B,CAACH,EAAYW,EAAKD,CAAI,EAAI,CAC9BC,EAAKD,CAAI,EAAID,EACb,QACD,CACAI,EAAIF,EAAKD,CAAI,EACRf,EAASkB,CAAE,EACfF,EAAKD,CAAI,EAAE,KAAMD,CAAI,EAErBE,EAAKD,CAAI,EAAI,CAAEG,EAAGJ,CAAI,CAExB,KAEA,KAAMK,EAAI,EAAGA,EAAIN,EAAKM,IACrBL,EAAMF,EAAMO,CAAE,EACdJ,EAAME,EAAIH,EAAKN,EAAKM,CAAI,EAAGN,CAAI,EAC/BQ,EAAKD,CAAI,EAAID,EAGf,OAAOE,CACR,CAKAlB,EAAO,QAAUS,IC3EjB,IAAIa,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "objectKeys", "isArray", "isObject", "isObjectLike", "isBoolean", "isFunction", "hasOwnProp", "format", "invertBy", "obj", "opts", "transform", "allowDupes", "keys", "len", "key", "val", "out", "cb", "v", "i", "main"]
}
